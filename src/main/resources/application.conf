akka {
  loglevel = DEBUG

  # Log at info level when messages are sent to dead letters.
  # Possible values:
  # on: all dead letters are logged
  # off: no logging of dead letters
  # n: positive integer, number of dead letters that will be logged
  log-dead-letters = off

  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  log-config-on-start = on


  actor {
    debug {

      # enable function of LoggingReceive, which is to log any received message at
      # DEBUG level
      receive = on

      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill and the like)
      autoreceive = on

      # enable DEBUG logging of actor lifecycle changes
      lifecycle = on

      # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
      fsm = off

      # enable DEBUG logging of subscription changes on the eventStream
      event-stream = off


    }
  }
  persistence {
    journal.plugin = "inmemory-journal"
    snapshot-store.plugin = "inmemory-snapshot-store"

    journal {
      plugin = "akka.persistence.journal.leveldb",
      leveldb {
        dir = "target/example/journal",
        native = false
      }
    },
    snapshot-store {
      plugin = "akka.persistence.snapshot-store.local",
      local {
        dir = "target/example/snapshots"
      }
    }
  }
}

fj-dispatcher {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    # Min number of threads
    parallelism-min = 2
    # available processors * factor
    parallelism-factor = 2.0
    # Max number of threads
    parallelism-max = 10
  }
  throughput = 100
  # Specifies the mailbox capacity to be used for the actor queue
  mailbox-capacity = -1

  mailbox-type =""
}

pinned-dispatcher {
  type = PinnedDispatcher

  executor = "thread-pool-executor"
  thread-pool-executor {
    # minimum number of threads
    core-pool-size-min = 2
    # available processors * factor
    core-pool-size-factor = 2.0
    # maximum number of threads
    core-pool-size-max = 10
  }
  throughput = 100
  mailbox-capacity = -1
  mailbox-type =""
}


MyRouterExample{
  akka.actor.deployment {
    /myRandomRouterActor {
      router = random
      nr-of-instances = 5
    }
  }
}

Frontend {
  akka {
    actor {
      provider = "akka.cluster.ClusterActorRefProvider"
    }
    remote {
      log-remote-lifecycle-events = off
      netty.tcp {
        hostname = "127.0.0.1"
        port = 2551
      }
    }

    cluster {
      roles = ["frontend"]
      seed-nodes = [
        "akka.tcp://ClusterSystem@127.0.0.1:2551"]

      auto-down-unreachable-after = 10s
    }
  }
}

Backend {
  akka{
    actor {
      provider = "akka.cluster.ClusterActorRefProvider"
    }
    remote {
      log-remote-lifecycle-events = off
      netty.tcp {
        hostname = "127.0.0.1"
        port = 0
      }
    }

    cluster {
      roles = ["backend"]
      seed-nodes = [
        "akka.tcp://ClusterSystem@127.0.0.1:2551"]

      auto-down-unreachable-after = 10s
    }
  }
}

akka.actor.deployment {
  /round-robin-group {
    router = round-robin-group
    routees.paths = ["/user/w1", "/user/w2", "/user/w3"]
  }

  /random-router-pool {
    router = random-pool
    nr-of-instances = 3
  }
}




mongodb {
  database = "tweets"
  servers = ["localhost:27017"]
}

http {
  host = "0.0.0.0"
  port = 8000
}

